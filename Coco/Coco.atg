/*-------------------------------------------------------------------------
    Coco.atg -- Attributed Grammar
    Compiler Generator Coco/R,
    Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
    extended by M. Loeberbauer & A. Woess, Univ. of Linz
    with improvements by Pat Terry, Rhodes University
    Swift port by Michael Griebling, 2015

    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2, or (at your option) any
    later version.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    As an exception, it is allowed to write an extension of Coco/R that is
    used as a plugin in non-free software.

    If not otherwise stated, any source code generated by Coco/R (other than
    Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/
/*-------------------------------------------------------------------------
 compile with:
   Coco Coco.atg
-------------------------------------------------------------------------*/

COMPILER Coco

/* Default parser declarations */
let id = 0
let str = 1

public var trace: OutputStream? // other Coco objects referenced in this ATG
public var tab = Tab()
public var dfa: DFA?
public var pgen: ParserGen?

var genScanner = false
var tokenString = ""            // used in declarations of literal tokens
let noString = "-none-"         // used in declarations of literal tokens

/*-------------------------------------------------------------------------*/

CHARACTERS
	letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
	digit     = "0123456789".
	cr        = '\r'.
	lf        = '\n'.
	tab       = '\t'.
	stringCh  = ANY - '"' - '\\' - cr - lf.
	charCh    = ANY - '\'' - '\\' - cr - lf.
	printable = '\u0020' .. '\u007e'.
	hex       = "0123456789abcdef".

TOKENS
	ident     = letter { letter | digit }.
	number    = digit { digit }.
	string    = '"' { stringCh | '\\' printable } '"'.
	badString = '"' { stringCh | '\\' printable } (cr | lf).
	char      = '\'' ( charCh | '\\' printable { hex } ) '\''.

PRAGMAS
	ddtSym    = '$' { digit | letter }.  (.	tab.SetDDT(la.val) .)

	optionSym = '$' letter { letter } '='
	            { digit | letter
	            | '-' | '.' | ':'
	            }.                       (.	tab.SetOption(la.val) .)


COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------*/

PRODUCTIONS

Coco                            (. var sym: Symbol?; var g, g1, g2: Graph?; let gramName: String; var s = CharSet(); var beg, line: Int .)
=
  [ // using statements
    ANY                         (. beg = t.pos; line = t.line .)
    { ANY }                     (. pgen!.usingPos = Position(beg, la.pos, 0, line) .)
  ]

  "COMPILER"                    (. genScanner = true
                                   tab.ignored = CharSet() .)
  ident                         (. gramName = t.val
                                   beg = la.pos; line = la.line
                                 .)
  { ANY }                       (. tab.semDeclPos = Position(beg, la.pos, 0, line) .)
  [ "IGNORECASE"                (. dfa!.ignoreCase = true .) ]   /* pdt */
  [ "CHARACTERS" { SetDecl }]
  [ "TOKENS"  { TokenDecl<Node.t> }]
  [ "PRAGMAS" { TokenDecl<Node.pr> }]
  { "COMMENTS"                  (. var nested = false .)
    "FROM" TokenExpr<&g1> 
    "TO" TokenExpr<&g2>
    [ "NESTED"                  (. nested = true .)
    ]                           (. dfa?.NewComment(g1!.l!, g2!.l!, nested) .)
  }
  { "IGNORE" Set<&s>            (. tab.ignored.Or(s) .)
  }

  SYNC 
"PRODUCTIONS"                   (. if genScanner { dfa?.MakeDeterministic() }
                                   tab.DeleteNodes()
                                 .)
  { ident                       (. sym = tab.FindSym(t.val)
                                   let undef = sym == nil
                                   if undef { sym = tab.NewSym(Node.nt, t.val, t.line) }
                                   else {
                                       if sym!.typ == Node.nt {
                                           if sym!.graph != nil { SemErr("name declared twice") }
                                       } else { SemErr("this symbol kind not allowed on left side of production") }
                                       sym!.line = t.line
                                   }
                                   let noAttrs = sym!.attrPos == nil
                                   sym!.attrPos = nil
                                 .)
    [ AttrDecl<sym!> ]           (. if !undef {
                                        if noAttrs != (sym!.attrPos == nil) {
                                            SemErr("attribute mismatch between declaration and use of this symbol")
                                        }
                                    }
                                 .)
    [ SemText<&sym!.semPos> ] WEAK
    '='
    Expression<&g>				(.	sym!.graph = g!.l
									tab.Finish(g!) .)
	WEAK
    '.'
  }
  "END" ident                   (.  if gramName != t.val {
                                        SemErr("name does not match grammar name")
                                    }
                                    tab.gramSy = tab.FindSym(gramName)
                                    if tab.gramSy == nil {
                                        SemErr("missing production for grammar name")
                                    } else {
                                        sym = tab.gramSy
                                        if sym!.attrPos != nil {
                                            SemErr("grammar symbol must not have attributes")
                                        }
                                    }
                                    tab.noSym = tab.NewSym(Node.t, "???", 0) // noSym gets highest number
                                    tab.SetupAnys()
                                    tab.RenumberPragmas()
                                    if tab.ddt[2] { tab.PrintNodes() }
                                    if errors.count == 0 {
                                        print("checking")
                                        tab.CompSymbolSets()
                                        if tab.ddt[7] { tab.XRef() }
                                        if tab.GrammarOk() {
                                            print("parser", terminator: "")
                                            pgen?.WriteParser()
                                            if genScanner {
                                                print(" + scanner", terminator: "")
                                                dfa?.WriteScanner()
                                                if tab.ddt[0] { dfa?.PrintStates() }
                                            }
                                            print(" generated")
                                            if tab.ddt[8] { pgen?.WriteStatistics() }
                                        }
                                    }
                                    if tab.ddt[6] { tab.PrintSymbolTable() } .)
  '.'
.

/*------------------------------------------------------------------------------------*/

SetDecl                         (. var s = CharSet() .)
=
  ident                         (. let name = t.val
                                   let c = tab.FindCharClass(name)
                                   if c != nil { SemErr("name declared twice") }
                                 .)
  '=' Set<&s>					(.	if s.Elements() == 0 { SemErr("character set must not be empty") }
									_ = tab.NewCharClass(name, s) .)
  '.'
.

/*------------------------------------------------------------------------------------*/

Set<_ s: inout CharSet>           (. var s2 = CharSet() .)
=
  SimSet<&s>
  { '+' SimSet<&s2>				(. s.Or(s2) .)
  | '-' SimSet<&s2>				(. s.Subtract(s2) .)
  }
.

/*------------------------------------------------------------------------------------*/

SimSet<_ s: inout CharSet>        (. var n1 = 0; var n2 = 0 .)
=                               (. s = CharSet() .)
( ident                         (. let c = tab.FindCharClass(t.val)
                                   if c == nil { SemErr("undefined name") } else { s.Or(c!.set) }
                                 .)
| string                        (.	var name = t.val
									name = tab.Unescape(name.substring(1, name.count-2))
									for ch in name {
									     if dfa!.ignoreCase { s.Set(ch.lowercased.unicodeValue) }
									     else { s.Set(ch.unicodeValue) }
									} .)
| Char<&n1>						(. s.Set(n1) .)
  [ ".." Char<&n2>				(. for i in n1...n2 { s.Set(i) } .)
  ]
| "ANY"                         (. s = CharSet(); s.Fill() .)
)
.

/*--------------------------------------------------------------------------------------*/

Char<_ n: inout Int>
=
  char                          (. var name = t.val; n = 0
                                   name = tab.Unescape(name.substring(1, name.count-2))
                                   if name.count == 1 { n = name[0].unicodeValue }
                                   else { SemErr("unacceptable character value") }
                                   if dfa!.ignoreCase && Character(n) >= "A" && Character(n) <= "Z" { n += 32 } .)
.

/*------------------------------------------------------------------------------------*/

TokenDecl<_ typ: Int>              (. var name = ""; var kind = 0; var sym: Symbol?; var g: Graph? .)
=
  Sym<&name, &kind>              (. sym = tab.FindSym(name)
                                    if sym != nil { SemErr("name declared twice") }
                                    else {
                                        sym = tab.NewSym(typ, name, t.line)
                                        sym!.tokenKind = Symbol.fixedToken
                                    }
                                    tokenString = ""
                                 .)
  SYNC
  ( '=' TokenExpr<&g> '.'        (. if kind == str { SemErr("a literal must not be declared with a structure") }
                                    tab.Finish(g!)
                                    if tokenString.isEmpty || tokenString == noString {
                                        dfa?.ConvertToStates(g!.l!, sym!)
                                    } else { // TokenExpr is a single string
                                        if tab.literals[tokenString] != nil {
                                            SemErr("token string declared twice")
                                        }
                                        tab.literals[tokenString] = sym
                                        dfa?.MatchLiteral(tokenString, sym!)
                                    }
                                 .)
  |                             (. if kind == id { genScanner = false }
                                   else { dfa?.MatchLiteral(sym!.name, sym!) }
                                 .)
  )
  [ SemText<&sym!.semPos>		(. if typ != Node.pr { SemErr("semantic action not allowed here") } .)
  ]
.

/*------------------------------------------------------------------------------------*/

AttrDecl<_ sym: Symbol>
=
  '<'                           (.  let beg = la.pos; let col = la.col; let line = la.line .)
  { ANY
  | badString                   (.  SemErr("bad string in attributes") .)
  }
  '>'                           (.  if t.pos > beg {
                                        sym.attrPos = Position(beg, t.pos, col, line)
                                    } .)
| "<."                          (. let beg = la.pos; let col = la.col; let line = la.line .)
  { ANY
  | badString                   (. SemErr("bad string in attributes") .)
  }
  ".>"                          (. if t.pos > beg {
                                        sym.attrPos = Position(beg, t.pos, col, line);
								   } .)
.

/*------------------------------------------------------------------------------------*/

Expression<_ g: inout Graph?>      (. var g2: Graph? .)
= 
  Term<&g>						 (. var first = true .)
  {                             WEAK
    '|'
    Term<&g2>					 (.	if first { tab.MakeFirstAlt(g!); first = false }
									tab.MakeAlternative(g!, g2!) .)
  }
.

/*------------------------------------------------------------------------------------*/

Term<_ g: inout Graph?>           (. var g2: Graph?; var rslv: Node? = nil
								   g = nil .)
=
( [                             (. rslv = tab.NewNode(Node.rslv, nil, la.line) .)
    Resolver<&rslv!.pos>		(. g = Graph(rslv) .)
  ]
  Factor<&g2>					(.	if rslv != nil { tab.MakeSequence(g!, g2!) }
									else { g = g2 }
                                 .)
  { Factor<&g2>					(. tab.MakeSequence(g!, g2!) .)
  }
|                               (. g = Graph(tab.NewNode(Node.eps, nil, 0)) .)
)                               (. if g == nil { // invalid start of Term
                                       g = Graph(tab.NewNode(Node.eps, nil, 0))
                                   } .)
.

/*------------------------------------------------------------------------------------*/

Factor<_ g: inout Graph?>          (. var name = ""; var kind = 0; var pos: Position?; var weak = false
                                    g = nil
                                 .)
=
( [ "WEAK"                      (. weak = true .)
  ]
  Sym<&name, &kind>             (. var sym = tab.FindSym(name)
                                   if sym == nil && kind == str {
                                       sym = tab.literals[name]
                                   }
                                   let undef = sym == nil
                                   if undef {
                                       if kind == id {
                                           sym = tab.NewSym(Node.nt, name, 0)  // forward nt
                                       } else if genScanner {
                                           sym = tab.NewSym(Node.t, name, t.line)
                                           dfa?.MatchLiteral(sym!.name, sym!)
                                       } else {  // undefined string in production
                                           SemErr("undefined string in production")
                                           sym = tab.eofSy  // dummy
                                       }
                                   }
                                   var typ = sym!.typ
                                   if typ != Node.t && typ != Node.nt {
                                       SemErr("this symbol kind is not allowed in a production");
                                   }
                                   if weak {
                                       if typ == Node.t { typ = Node.wt }
                                       else { SemErr("only terminals may be weak") }
                                   }
                                   let p = tab.NewNode(typ, sym, t.line)
                                   g = Graph(p) .)
  [ Attribs<p>                  (. if kind != id { SemErr("a literal must not have attributes") } .)
  ]                             (. if undef {
                                       sym!.attrPos = p.pos  // dummy
                                   } else if (p.pos == nil) != (sym!.attrPos == nil) {
                                       SemErr("attribute mismatch between declaration and use of this symbol")
                                   } .)
| '(' Expression<&g> ')'
| '[' Expression<&g> ']'		(. tab.MakeOption(g!) .)
| '{' Expression<&g> '}'		(. tab.MakeIteration(g!) .)
| SemText<&pos>                 (. let p = tab.NewNode(Node.sem, nil, 0)
                                   p.pos = pos
                                   g = Graph(p) .)
| "ANY"                         (. let p = tab.NewNode(Node.any, nil, 0)  // p.set is set in tab.SetupAnys
                                   g = Graph(p) .)
| "SYNC"                        (. let p = tab.NewNode(Node.sync, nil, 0)
                                   g = Graph(p) .)
)                               (. if g == nil { // invalid start of Factor
                                       g = Graph(tab.NewNode(Node.eps, nil, 0))
                                   }
								 .)
.

/*------------------------------------------------------------------------------------*/

Resolver<_ pos: inout Position?>
=
  "IF" "("                       (. let beg = la.pos; let col = la.col; let line = la.line .)
  Condition                      (. pos = Position(beg, t.pos, col, line) .)
.

/*------------------------------------------------------------------------------------*/

Condition = { "(" Condition | ANY } ")" .

/*------------------------------------------------------------------------------------*/

TokenExpr<_ g: inout Graph?>	(. var g2: Graph? .)
=
  TokenTerm<&g>					(. var first = true .)
  { WEAK
    '|'
    TokenTerm<&g2>				(. if first { tab.MakeFirstAlt(g!); first = false }
                                   tab.MakeAlternative(g!, g2!) .)
  }
.

/*------------------------------------------------------------------------------------*/

TokenTerm<_ g: inout Graph?>	(. var g2: Graph? .)
=
  TokenFactor<&g>
  { TokenFactor<&g2>			(. tab.MakeSequence(g!, g2!) .)
  }
  [ "CONTEXT"
    '(' TokenExpr<&g2>          (. tab.SetContextTrans(g2!.l); dfa!.hasCtxMoves = true
                                   tab.MakeSequence(g!, g2!) .)
    ')'
  ]
.

/*------------------------------------------------------------------------------------*/

TokenFactor<_ g: inout Graph?>   (. var name = ""; var kind = 0 .)
=
                                (. g = nil .)
( Sym<&name, &kind>             (. if kind == id {
                                       var c = tab.FindCharClass(name)
                                       if c == nil {
                                           SemErr("undefined name")
                                           c = tab.NewCharClass(name, CharSet())
                                       }
                                       let p = tab.NewNode(Node.clas, nil, 0); p.val = c!.n
                                       g = Graph(p)
                                       tokenString = noString
                                   } else { // str
                                       g = tab.StrToGraph(name)
                                       if tokenString.isEmpty { tokenString = name }
                                       else { tokenString = noString }
                                   }  .)
| '(' TokenExpr<&g> ')'
| '[' TokenExpr<&g> ']'			(. tab.MakeOption(g!); tokenString = noString .)
| '{' TokenExpr<&g> '}'			(. tab.MakeIteration(g!); tokenString = noString .)
)                               (. if g == nil { // invalid start of TokenFactor
                                       g = Graph(tab.NewNode(Node.eps, nil, 0))
                                   } .)
.

/*------------------------------------------------------------------------------------*/

Sym<_ name: inout String, _ kind: inout Int>
=                               (. name = "???"; kind = id .)
( ident                         (. kind = id; name = t.val .)
| (string                       (. name = t.val .)
  | char                        (. name = "\"" + t.val.substring(1, t.val.count-2) + "\"" .)
  )                             (. kind = str
                                   if dfa!.ignoreCase { name = name.lowercased() }
                                   if name.contains(" ") { SemErr("literal tokens must not contain blanks") } .)
)
.

/*------------------------------------------------------------------------------------*/

Attribs<_ p: Node>
=
  '<'                           (. let beg = la.pos; let col = la.col; let line = la.line .)
  { ANY 
  | badString                   (. SemErr("bad string in attributes") .)
  }
  '>'                           (. if t.pos > beg { p.pos = Position(beg, t.pos, col, line) } .)
| "<."                          (. let beg = la.pos; let col = la.col; let line = la.line .)
  { ANY 
  | badString                   (. SemErr("bad string in attributes") .)
  }
  ".>"                          (. if t.pos > beg { p.pos = Position(beg, t.pos, col, line) } .)
.

/*------------------------------------------------------------------------------------*/

SemText<_ pos: inout Position?>
=
  "(."                          (. let beg = la.pos; let col = la.col; let line = la.line .)
  { ANY
  | badString                   (. SemErr("bad string in semantic action") .)
  | "(."                        (. SemErr("missing end of previous semantic action") .)
  }
  ".)"                          (. pos = Position(beg, t.pos, col, line) .)
.

END Coco.
